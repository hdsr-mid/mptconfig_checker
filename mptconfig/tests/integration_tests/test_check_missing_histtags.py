from mptconfig.checker import MptConfigChecker
from mptconfig.excel import ExcelSheet
from mptconfig.excel import ExcelSheetTypeChoices
from mptconfig.tests.fixtures import patched_path_constants_1
from mptconfig.tests.fixtures import patched_path_constants_2
from mptconfig.tests.utils import equal_dataframes

import pandas as pd  # noqa pandas comes with geopandas


# silence flake8 errors
_patched_path_constants_1 = patched_path_constants_1
_patched_path_constants_2 = patched_path_constants_2


expected_df_1 = pd.DataFrame(
    {
        "UNKNOWN_SERIE": {
            0: "1006_HO2",
            1: "1006_Q2",
            2: "1006_Q3",
            3: "1013_HR3",
            4: "1013_HS3",
            5: "1104_ES1",
            6: "1104_FQ1",
            7: "1104_HB1",
            8: "1104_HO1",
            9: "1104_HO2",
            10: "1104_HO3",
            11: "1104_HR1",
            12: "1104_HR2",
            13: "1104_HS1",
            14: "1104_HS2",
            15: "1104_IB1",
            16: "1104_Q1",
            17: "1104_Q2",
            18: "1104_SP1",
            19: "1807_HR1",
            20: "1807_HS1",
            21: "2125_HO2",
            22: "2125_HO3",
            23: "2125_HR2",
            24: "2125_HS2",
            25: "315_ES1",
            26: "322_ES2",
            27: "4310_Q4",
            28: "4315_ES1",
            29: "4322_Q8",
            30: "4327_Q2",
            31: "4331_HS4",
            32: "4406_HB1",
            33: "4406_HO1",
            34: "4406_HR1",
            35: "4406_HS1",
            36: "4406_Q1",
            37: "4406_SW1",
            38: "4408_ES2",
            39: "4409_HB1",
            40: "4409_HO1",
            41: "4409_HR1",
            42: "4409_HS1",
            43: "4409_Q1",
            44: "4409_SW1",
            45: "4410_ES1",
            46: "4410_HB1",
            47: "4410_HO1",
            48: "4410_HR1",
            49: "4410_HS1",
            50: "4410_Q1",
            51: "4410_SP1",
            52: "4427_Q1",
            53: "4803_HO3",
            54: "4803_Q5",
            55: "4803_Q6",
        },
        "STARTDATE": {
            0: pd.Timestamp("2020-03-19 11:45:00"),
            1: pd.Timestamp("2020-03-19 11:45:00"),
            2: pd.Timestamp("2020-03-19 11:45:00"),
            3: pd.Timestamp("2018-06-20 16:26:18"),
            4: pd.Timestamp("2018-06-20 16:26:18"),
            5: pd.Timestamp("2020-02-12 14:43:40"),
            6: pd.Timestamp("2020-02-12 14:43:40"),
            7: pd.Timestamp("2020-02-12 14:43:40"),
            8: pd.Timestamp("2020-02-12 14:43:40"),
            9: pd.Timestamp("2020-02-12 14:43:40"),
            10: pd.Timestamp("2020-02-12 14:43:40"),
            11: pd.Timestamp("2020-02-12 14:43:40"),
            12: pd.Timestamp("2020-02-12 14:43:40"),
            13: pd.Timestamp("2020-02-12 14:43:40"),
            14: pd.Timestamp("2020-02-12 14:43:40"),
            15: pd.Timestamp("2020-02-12 14:43:40"),
            16: pd.Timestamp("2020-02-12 14:43:40"),
            17: pd.Timestamp("2020-02-12 14:43:40"),
            18: pd.Timestamp("2020-02-12 14:43:40"),
            19: pd.Timestamp("2018-04-15 00:00:00"),
            20: pd.Timestamp("2018-04-15 02:30:47"),
            21: pd.Timestamp("2019-11-06 14:06:45"),
            22: pd.Timestamp("2019-11-06 14:06:45"),
            23: pd.Timestamp("2019-11-06 14:06:45"),
            24: pd.Timestamp("2019-11-06 14:06:45"),
            25: pd.Timestamp("2014-05-26 13:20:20"),
            26: pd.Timestamp("2015-07-13 15:30:11"),
            27: pd.Timestamp("2018-03-27 13:15:00"),
            28: pd.Timestamp("2018-03-27 05:45:10"),
            29: pd.Timestamp("2019-01-11 12:31:25"),
            30: pd.Timestamp("2019-10-02 15:34:51"),
            31: pd.Timestamp("2019-05-21 08:30:00"),
            32: pd.Timestamp("2019-07-11 09:52:57"),
            33: pd.Timestamp("2019-07-11 09:52:57"),
            34: pd.Timestamp("2019-07-11 09:52:57"),
            35: pd.Timestamp("2019-07-11 09:52:57"),
            36: pd.Timestamp("2019-07-11 09:52:57"),
            37: pd.Timestamp("2019-07-11 09:52:57"),
            38: pd.Timestamp("2019-04-23 10:12:06"),
            39: pd.Timestamp("2019-07-19 08:03:02"),
            40: pd.Timestamp("2019-07-19 08:03:02"),
            41: pd.Timestamp("2019-07-19 08:03:02"),
            42: pd.Timestamp("2019-07-19 08:03:02"),
            43: pd.Timestamp("2019-07-19 08:03:02"),
            44: pd.Timestamp("2019-07-19 08:03:02"),
            45: pd.Timestamp("2019-09-12 11:38:09"),
            46: pd.Timestamp("2019-09-09 11:03:43"),
            47: pd.Timestamp("2019-09-09 11:03:43"),
            48: pd.Timestamp("2019-09-12 11:15:00"),
            49: pd.Timestamp("2019-09-12 11:34:42"),
            50: pd.Timestamp("2019-09-12 11:15:00"),
            51: pd.Timestamp("2019-09-09 11:03:43"),
            52: pd.Timestamp("2020-01-14 13:45:00"),
            53: pd.Timestamp("2017-12-24 00:00:00"),
            54: pd.Timestamp("2019-11-27 14:30:00"),
            55: pd.Timestamp("2019-11-27 14:27:57"),
        },
        "ENDDATE": {
            0: pd.Timestamp("2020-06-30 23:45:00"),
            1: pd.Timestamp("2020-06-30 23:45:00"),
            2: pd.Timestamp("2020-06-30 23:45:00"),
            3: pd.Timestamp("2020-06-30 23:45:00"),
            4: pd.Timestamp("2020-05-19 09:30:00"),
            5: pd.Timestamp("2020-06-30 02:31:50"),
            6: pd.Timestamp("2020-06-30 23:45:00"),
            7: pd.Timestamp("2020-06-30 23:45:00"),
            8: pd.Timestamp("2020-06-30 23:45:00"),
            9: pd.Timestamp("2020-06-30 23:45:00"),
            10: pd.Timestamp("2020-06-30 23:45:00"),
            11: pd.Timestamp("2020-06-30 23:45:00"),
            12: pd.Timestamp("2020-06-30 23:45:00"),
            13: pd.Timestamp("2020-06-30 02:31:50"),
            14: pd.Timestamp("2020-06-30 02:31:50"),
            15: pd.Timestamp("2020-06-30 23:45:00"),
            16: pd.Timestamp("2020-06-30 23:45:00"),
            17: pd.Timestamp("2020-06-30 23:45:00"),
            18: pd.Timestamp("2020-06-30 23:45:00"),
            19: pd.Timestamp("2020-06-30 23:45:00"),
            20: pd.Timestamp("2020-06-30 16:09:09"),
            21: pd.Timestamp("2020-06-30 23:45:00"),
            22: pd.Timestamp("2020-06-30 23:45:00"),
            23: pd.Timestamp("2020-06-30 23:45:00"),
            24: pd.Timestamp("2020-06-30 14:30:30"),
            25: pd.Timestamp("2018-03-27 05:45:10"),
            26: pd.Timestamp("2018-03-27 13:00:30"),
            27: pd.Timestamp("2020-06-30 23:45:00"),
            28: pd.Timestamp("2018-04-11 05:45:09"),
            29: pd.Timestamp("2020-06-30 23:45:00"),
            30: pd.Timestamp("2020-01-14 16:03:34"),
            31: pd.Timestamp("2020-05-05 09:45:00"),
            32: pd.Timestamp("2020-06-30 23:45:00"),
            33: pd.Timestamp("2020-06-30 23:45:00"),
            34: pd.Timestamp("2020-06-30 23:45:00"),
            35: pd.Timestamp("2020-06-30 17:46:19"),
            36: pd.Timestamp("2020-06-30 23:45:00"),
            37: pd.Timestamp("2020-06-30 23:45:00"),
            38: pd.Timestamp("2019-06-17 05:46:36"),
            39: pd.Timestamp("2020-06-30 23:45:01"),
            40: pd.Timestamp("2020-06-30 23:45:01"),
            41: pd.Timestamp("2020-06-30 23:45:01"),
            42: pd.Timestamp("2020-06-30 23:44:49"),
            43: pd.Timestamp("2020-06-30 23:45:01"),
            44: pd.Timestamp("2020-06-30 23:45:01"),
            45: pd.Timestamp("2020-06-30 05:46:34"),
            46: pd.Timestamp("2020-06-30 23:45:00"),
            47: pd.Timestamp("2020-06-30 23:45:00"),
            48: pd.Timestamp("2020-06-30 23:45:00"),
            49: pd.Timestamp("2020-06-30 14:26:11"),
            50: pd.Timestamp("2020-06-30 23:45:00"),
            51: pd.Timestamp("2020-06-30 23:45:00"),
            52: pd.Timestamp("2020-06-30 12:00:00"),
            53: pd.Timestamp("2020-06-30 23:45:00"),
            54: pd.Timestamp("2020-06-30 23:45:00"),
            55: pd.Timestamp("2020-06-30 23:45:00"),
        },
    }
)
expected_df_2 = pd.DataFrame(
    {
        "ENDDATE": {
            0: pd.Timestamp("2018-04-10 14:00:15"),
            1: pd.Timestamp("2020-05-19 09:30:00"),
            2: pd.Timestamp("2020-09-30 23:45:00"),
            3: pd.Timestamp("2020-09-30 02:30:48"),
            4: pd.Timestamp("2003-12-31 23:45:00"),
            5: pd.Timestamp("2018-03-27 05:45:10"),
            6: pd.Timestamp("2018-03-27 13:00:30"),
            7: pd.Timestamp("2020-09-30 23:02:40"),
            8: pd.Timestamp("2020-09-30 23:45:00"),
            9: pd.Timestamp("2020-09-30 23:45:00"),
            10: pd.Timestamp("2018-04-11 05:45:09"),
            11: pd.Timestamp("2020-09-30 22:58:18"),
            12: pd.Timestamp("2020-05-05 09:45:00"),
            13: pd.Timestamp("2019-06-17 05:46:36"),
            14: pd.Timestamp("2020-09-30 23:46:30"),
        },
        "STARTDATE": {
            0: pd.Timestamp("2018-03-27 02:30:20"),
            1: pd.Timestamp("2018-06-20 16:26:18"),
            2: pd.Timestamp("2018-04-15 00:00:00"),
            3: pd.Timestamp("2018-04-15 02:30:47"),
            4: pd.Timestamp("1991-01-01 00:00:00"),
            5: pd.Timestamp("2014-05-26 13:20:20"),
            6: pd.Timestamp("2015-07-13 15:30:11"),
            7: pd.Timestamp("2019-02-25 15:04:30"),
            8: pd.Timestamp("2018-03-27 13:15:00"),
            9: pd.Timestamp("2018-06-24 00:00:00"),
            10: pd.Timestamp("2018-03-27 05:45:10"),
            11: pd.Timestamp("2018-03-27 13:00:30"),
            12: pd.Timestamp("2019-05-21 08:30:00"),
            13: pd.Timestamp("2019-04-23 10:12:06"),
            14: pd.Timestamp("2020-01-14 16:29:15"),
        },
        "UNKNOWN_SERIE": {
            0: "1010_ES1",
            1: "1013_HS3",
            2: "1807_HR1",
            3: "1807_HS1",
            4: "313_V1",
            5: "315_ES1",
            6: "322_ES2",
            7: "3230_Q4",
            8: "4310_Q4",
            9: "4310_SP1",
            10: "4315_ES1",
            11: "4322_ES2",
            12: "4331_HS4",
            13: "4408_ES2",
            14: "4813_Q2",
        },
    }
)


def test_check_histtags_nomatch_1(patched_path_constants_1):
    """integration test with patched paths 1"""
    meetpunt_config = MptConfigChecker()
    excelsheet = meetpunt_config.check_histtags_nomatch(sheet_name="blabla")
    assert isinstance(excelsheet, ExcelSheet)
    assert excelsheet.name == "blabla"
    assert excelsheet.sheet_type == ExcelSheetTypeChoices.output_check
    assert excelsheet.nr_rows == 56
    assert equal_dataframes(expected_df=expected_df_1, test_df=excelsheet.df)


def test_check_histtags_nomatch_2(patched_path_constants_2):
    """integration test with patched paths 2"""
    meetpunt_config = MptConfigChecker()
    excelsheet = meetpunt_config.check_histtags_nomatch(sheet_name="blabla")
    assert isinstance(excelsheet, ExcelSheet)
    assert excelsheet.name == "blabla"
    assert excelsheet.sheet_type == ExcelSheetTypeChoices.output_check
    assert excelsheet.nr_rows == 15
    assert equal_dataframes(expected_df=expected_df_2, test_df=excelsheet.df)
